# Generated by Django 5.2.7 on 2025-10-31 16:04

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Location",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Location name (e.g., 'Central Park')", max_length=200
                    ),
                ),
                ("address", models.TextField(help_text="Full street address")),
                ("city", models.CharField(max_length=100)),
                ("state", models.CharField(max_length=100)),
                ("zip_code", models.CharField(blank=True, max_length=20)),
                ("country", models.CharField(default="USA", max_length=100)),
                (
                    "latitude",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=9, null=True
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=9, null=True
                    ),
                ),
                (
                    "location_type",
                    models.CharField(
                        choices=[
                            ("venue", "Event Venue"),
                            ("haunted", "Haunted Place"),
                            ("business", "Business"),
                            ("neighborhood", "Neighborhood"),
                            ("landmark", "Landmark"),
                            ("other", "Other"),
                        ],
                        default="venue",
                        max_length=20,
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("created_date", models.DateTimeField(auto_now_add=True)),
                (
                    "is_verified",
                    models.BooleanField(
                        default=False, help_text="Verified by administrators"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="locations_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Location",
                "verbose_name_plural": "Locations",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="HauntedPlace",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "story_title",
                    models.CharField(
                        help_text="Title of the ghost story/legend", max_length=200
                    ),
                ),
                (
                    "story_content",
                    models.TextField(help_text="The spooky story or legend"),
                ),
                (
                    "historical_context",
                    models.TextField(
                        blank=True, help_text="Factual historical information"
                    ),
                ),
                (
                    "scare_level",
                    models.IntegerField(
                        choices=[
                            (1, "1 - Not Scary (Family Friendly)"),
                            (2, "2 - Mildly Spooky"),
                            (3, "3 - Moderately Scary"),
                            (4, "4 - Very Scary"),
                            (5, "5 - Terrifying (Adults Only)"),
                        ],
                        default=3,
                    ),
                ),
                (
                    "is_educational",
                    models.BooleanField(
                        default=False, help_text="Suitable for educational purposes"
                    ),
                ),
                (
                    "year_established",
                    models.IntegerField(
                        blank=True,
                        help_text="Year location was built/established",
                        null=True,
                    ),
                ),
                (
                    "reported_phenomena",
                    models.TextField(
                        blank=True, help_text="Types of paranormal activity reported"
                    ),
                ),
                (
                    "famous_for",
                    models.CharField(
                        blank=True,
                        help_text="What makes this place notable",
                        max_length=500,
                    ),
                ),
                ("created_date", models.DateTimeField(auto_now_add=True)),
                ("modified_date", models.DateTimeField(auto_now=True)),
                ("view_count", models.IntegerField(default=0)),
                (
                    "visit_count",
                    models.IntegerField(
                        default=0, help_text="People who've visited this location"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="haunted_places_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "location",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="haunted_place",
                        to="core.location",
                    ),
                ),
            ],
            options={
                "verbose_name": "Haunted Place",
                "verbose_name_plural": "Haunted Places",
                "ordering": ["-created_date"],
            },
        ),
        migrations.CreateModel(
            name="Event",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("slug", models.SlugField(blank=True, unique=True)),
                (
                    "description",
                    models.TextField(help_text="Detailed event description"),
                ),
                ("event_date", models.DateField()),
                ("start_time", models.TimeField()),
                ("end_time", models.TimeField(blank=True, null=True)),
                (
                    "cost",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        help_text="Entry fee (0 = free)",
                        max_digits=6,
                    ),
                ),
                (
                    "age_appropriateness",
                    models.CharField(
                        choices=[
                            ("all_ages", "All Ages"),
                            ("family_friendly", "Family Friendly"),
                            ("kids_only", "Kids Only (under 12)"),
                            ("teens", "Teens (13-17)"),
                            ("adults", "Adults Only (18+)"),
                        ],
                        default="all_ages",
                        max_length=20,
                    ),
                ),
                (
                    "event_category",
                    models.CharField(
                        choices=[
                            ("haunted_house", "Haunted House"),
                            ("costume_party", "Costume Party"),
                            ("trick_or_treat", "Trick or Treat"),
                            ("ghost_tour", "Ghost Tour"),
                            ("pumpkin_carving", "Pumpkin Carving"),
                            ("halloween_market", "Halloween Market"),
                            ("film_screening", "Film Screening"),
                            ("parade", "Halloween Parade"),
                            ("other", "Other"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "performing_artists",
                    models.CharField(
                        blank=True,
                        help_text="Comma-separated artists/performers",
                        max_length=500,
                    ),
                ),
                (
                    "contact_info",
                    models.EmailField(
                        blank=True,
                        help_text="Contact email for questions",
                        max_length=254,
                    ),
                ),
                ("website_url", models.URLField(blank=True)),
                (
                    "capacity",
                    models.IntegerField(
                        blank=True, help_text="Maximum attendees", null=True
                    ),
                ),
                ("created_date", models.DateTimeField(auto_now_add=True)),
                ("modified_date", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "is_featured",
                    models.BooleanField(
                        default=False, help_text="Featured on homepage"
                    ),
                ),
                ("view_count", models.IntegerField(default=0)),
                ("like_count", models.IntegerField(default=0)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="events_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="events",
                        to="core.location",
                    ),
                ),
            ],
            options={
                "verbose_name": "Event",
                "verbose_name_plural": "Events",
                "ordering": ["-event_date", "-start_time"],
            },
        ),
        migrations.CreateModel(
            name="Business",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("business_name", models.CharField(max_length=200)),
                ("slug", models.SlugField(blank=True, unique=True)),
                (
                    "business_type",
                    models.CharField(
                        choices=[
                            ("costume_shop", "Costume Shop"),
                            ("party_supplies", "Party Supplies"),
                            ("event_venue", "Event Venue"),
                            ("haunted_attraction", "Haunted Attraction"),
                            ("decorator", "Decorator"),
                            ("photographer", "Photographer"),
                            ("food_vendor", "Food Vendor"),
                            ("entertainment", "Entertainment"),
                            ("other", "Other"),
                        ],
                        max_length=30,
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("phone", models.CharField(blank=True, max_length=20)),
                ("email", models.EmailField(blank=True, max_length=254)),
                ("website", models.URLField(blank=True)),
                ("facebook_url", models.URLField(blank=True)),
                ("instagram_handle", models.CharField(blank=True, max_length=100)),
                (
                    "hours_of_operation",
                    models.TextField(
                        blank=True, help_text="Business hours description"
                    ),
                ),
                (
                    "verified",
                    models.BooleanField(
                        default=False, help_text="Verified by administrators"
                    ),
                ),
                ("verified_date", models.DateTimeField(blank=True, null=True)),
                ("created_date", models.DateTimeField(auto_now_add=True)),
                ("modified_date", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="business",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="businesses",
                        to="core.location",
                    ),
                ),
            ],
            options={
                "verbose_name": "Business",
                "verbose_name_plural": "Businesses",
                "ordering": ["business_name"],
            },
        ),
        migrations.CreateModel(
            name="Media",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "entity_type",
                    models.CharField(
                        choices=[
                            ("event", "Event"),
                            ("haunted_place", "Haunted Place"),
                            ("business", "Business"),
                            ("post", "Post"),
                            ("user_profile", "User Profile"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "entity_id",
                    models.IntegerField(help_text="ID of the related entity"),
                ),
                ("file", models.FileField(upload_to="media/%Y/%m/%d/")),
                (
                    "file_type",
                    models.CharField(
                        choices=[
                            ("image", "Image"),
                            ("video", "Video"),
                            ("document", "Document"),
                        ],
                        default="image",
                        max_length=20,
                    ),
                ),
                ("caption", models.CharField(blank=True, max_length=500)),
                (
                    "alt_text",
                    models.CharField(
                        blank=True, help_text="Accessibility text", max_length=200
                    ),
                ),
                ("upload_date", models.DateTimeField(auto_now_add=True)),
                (
                    "order",
                    models.IntegerField(
                        default=0, help_text="Display order in gallery"
                    ),
                ),
                (
                    "uploaded_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="media_uploads",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Media File",
                "verbose_name_plural": "Media Files",
                "ordering": ["entity_type", "entity_id", "order"],
            },
        ),
        migrations.CreateModel(
            name="Post",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("content", models.TextField(help_text="Post content/caption")),
                (
                    "post_type",
                    models.CharField(
                        choices=[
                            ("status", "Status Update"),
                            ("photo", "Photo Post"),
                            ("event_share", "Event Share"),
                            ("place_share", "Place Share"),
                        ],
                        default="status",
                        max_length=20,
                    ),
                ),
                (
                    "reference_type",
                    models.CharField(
                        blank=True,
                        help_text="Type of referenced content",
                        max_length=20,
                    ),
                ),
                (
                    "reference_id",
                    models.IntegerField(
                        blank=True, help_text="ID of referenced content", null=True
                    ),
                ),
                ("created_date", models.DateTimeField(auto_now_add=True)),
                ("modified_date", models.DateTimeField(auto_now=True)),
                ("like_count", models.IntegerField(default=0)),
                ("comment_count", models.IntegerField(default=0)),
                ("share_count", models.IntegerField(default=0)),
                ("is_public", models.BooleanField(default=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="posts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Post",
                "verbose_name_plural": "Posts",
                "ordering": ["-created_date"],
            },
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "user_type",
                    models.CharField(
                        choices=[
                            ("visitor", "Visitor"),
                            ("business_owner", "Business Owner"),
                            ("city_official", "City Official"),
                            ("event_organizer", "Event Organizer"),
                        ],
                        default="visitor",
                        max_length=20,
                    ),
                ),
                (
                    "bio",
                    models.TextField(
                        blank=True,
                        help_text="Tell us about yourself and your Halloween interests!",
                    ),
                ),
                (
                    "profile_photo",
                    models.ImageField(blank=True, null=True, upload_to="profiles/"),
                ),
                (
                    "favorite_halloween_activity",
                    models.CharField(blank=True, max_length=200),
                ),
                (
                    "location",
                    models.CharField(
                        blank=True, help_text="Your city or region", max_length=200
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "User Profile",
                "verbose_name_plural": "User Profiles",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Comment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "entity_type",
                    models.CharField(
                        choices=[
                            ("event", "Event"),
                            ("post", "Post"),
                            ("haunted_place", "Haunted Place"),
                        ],
                        max_length=20,
                    ),
                ),
                ("entity_id", models.IntegerField()),
                ("content", models.TextField(help_text="Comment text")),
                ("created_date", models.DateTimeField(auto_now_add=True)),
                ("modified_date", models.DateTimeField(auto_now=True)),
                ("is_edited", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                ("is_flagged", models.BooleanField(default=False)),
                ("like_count", models.IntegerField(default=0)),
                (
                    "parent_comment",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="replies",
                        to="core.comment",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Comment",
                "verbose_name_plural": "Comments",
                "ordering": ["created_date"],
                "indexes": [
                    models.Index(
                        fields=["entity_type", "entity_id"],
                        name="core_commen_entity__ad28d6_idx",
                    ),
                    models.Index(
                        fields=["parent_comment"], name="core_commen_parent__6599bc_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="Coupon",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="e.g., '20% off costume rentals'", max_length=200
                    ),
                ),
                ("description", models.TextField()),
                (
                    "discount_code",
                    models.CharField(
                        help_text="Unique code to use at checkout",
                        max_length=50,
                        unique=True,
                    ),
                ),
                (
                    "discount_percentage",
                    models.IntegerField(
                        blank=True, help_text="Percentage off (0-100)", null=True
                    ),
                ),
                (
                    "discount_amount",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Fixed dollar amount off",
                        max_digits=6,
                        null=True,
                    ),
                ),
                ("valid_from", models.DateField()),
                ("valid_until", models.DateField()),
                (
                    "terms_and_conditions",
                    models.TextField(
                        blank=True, help_text="Fine print and restrictions"
                    ),
                ),
                (
                    "max_uses",
                    models.IntegerField(
                        blank=True, help_text="Leave blank for unlimited", null=True
                    ),
                ),
                ("current_uses", models.IntegerField(default=0)),
                ("is_active", models.BooleanField(default=True)),
                ("created_date", models.DateTimeField(auto_now_add=True)),
                (
                    "business",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="coupons",
                        to="core.business",
                    ),
                ),
            ],
            options={
                "verbose_name": "Coupon",
                "verbose_name_plural": "Coupons",
                "ordering": ["-valid_until"],
                "indexes": [
                    models.Index(
                        fields=["discount_code"], name="core_coupon_discoun_ad9f8f_idx"
                    ),
                    models.Index(
                        fields=["valid_from", "valid_until"],
                        name="core_coupon_valid_f_6f8e2a_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="Like",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "entity_type",
                    models.CharField(
                        choices=[
                            ("event", "Event"),
                            ("post", "Post"),
                            ("comment", "Comment"),
                            ("haunted_place", "Haunted Place"),
                        ],
                        max_length=20,
                    ),
                ),
                ("entity_id", models.IntegerField()),
                ("created_date", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="likes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Like",
                "verbose_name_plural": "Likes",
                "indexes": [
                    models.Index(
                        fields=["entity_type", "entity_id"],
                        name="core_like_entity__3b9f81_idx",
                    ),
                    models.Index(fields=["user"], name="core_like_user_id_a989fd_idx"),
                ],
                "unique_together": {("user", "entity_type", "entity_id")},
            },
        ),
        migrations.AddIndex(
            model_name="location",
            index=models.Index(
                fields=["latitude", "longitude"], name="core_locati_latitud_367ccc_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="location",
            index=models.Index(
                fields=["city", "state"], name="core_locati_city_ef2718_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="event",
            index=models.Index(
                fields=["event_date"], name="core_event_event_d_ed494e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="event",
            index=models.Index(
                fields=["event_category"], name="core_event_event_c_cd5435_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="event",
            index=models.Index(
                fields=["is_active"], name="core_event_is_acti_031c55_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="media",
            index=models.Index(
                fields=["entity_type", "entity_id"],
                name="core_media_entity__eb2c68_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="post",
            index=models.Index(
                fields=["-created_date"], name="core_post_created_341dd1_idx"
            ),
        ),
    ]
